configfile: 'config.yml'

gridx=config['gridx']
gridy=config['gridy']

wildcard_constraints:
    tile='[0-9]+'


def get_tile_targets():
    tile_path='results/tile-{tile}_SPIM.ome.zarr'

    return expand(tile_path, tile=range(gridx*gridy))


rule all:
    input: 
        ome_zarr=get_tile_targets()

rule create_test_dataset_single_ome_zarr:
    params:
        grid_shape=(gridx,gridy),
        tile_index=lambda wildcards: int(wildcards.tile)
    output: 
        ome_zarr=directory('results/tile-{tile}_SPIM.ome.zarr'),
        nifti='results/tile-{tile}_SPIM.nii',
    script: 'scripts/create_test_dataset_singletile.py'


rule find_overlapping_pairs:
    input:
        ome_zarr=get_tile_targets()
    output:
        txt='results/overlapping_pairs.txt'
    script: 'scripts/find_overlapping_pairs.py'
        
rule compute_pairwise_correlation:
    input:
        ome_zarr=get_tile_targets(),
        pairs='results/overlapping_pairs.txt'
    output:
        offsets='results/pairwise_offsets.txt'
    script: 'scripts/compute_pairwise_correlation.py'

rule global_optimization:
    input:
        ome_zarr=get_tile_targets(),
        pairs='results/overlapping_pairs.txt',
        offsets='results/pairwise_offsets.txt'
    output:
        optimized_translations='results/optimized_translations.txt'
    script: 
        'scripts/global_optimization.py'
 

rule assign_translations:
    input:
        ome_zarr=get_tile_targets(),
        optimized_translations='results/optimized_translations.txt'
    output:
#        ome_zarr=get_tile_targets_optimized(),
        nifti=expand('results/tile-{tile}_optimized_SPIM.nii.gz', tile=range(gridx*gridy))
    script: 
        "scripts/assign_translation.py"
 

