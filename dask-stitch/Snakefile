configfile: 'config.yml'

gridx=config['gridx']
gridy=config['gridy']

wildcard_constraints:
    tile='[0-9]+'


rule all:
    input: 
        'results/fused_SPIM.nii'

rule create_test_dataset_single_ome_zarr:
    params:
        grid_shape=(gridx,gridy),
        tile_index=lambda wildcards: int(wildcards.tile)
    output: 
        ome_zarr=directory('results/tile-{tile}_SPIM.ome.zarr'),
        nifti='results/tile-{tile}_SPIM.nii',
        nifti_fromzarr='results/tile-{tile}_fromzarr_SPIM.nii',
    script: 'scripts/create_test_dataset_singletile.py'


rule find_overlapping_pairs:
    input:
        ome_zarr=expand('results/tile-{tile}_SPIM.ome.zarr', tile=range(gridx*gridy)),
    output:
        txt='results/overlapping_pairs.txt'
    script: 'scripts/find_overlapping_pairs.py'
        
rule compute_pairwise_correlation:
    input:
        ome_zarr=expand('results/tile-{tile}_SPIM.ome.zarr', tile=range(gridx*gridy)),
        pairs='results/overlapping_pairs.txt'
    output:
        offsets='results/pairwise_offsets.txt',
        diagnostics_dir=directory('results/pairwise_offsets_work')
    script: 'scripts/compute_pairwise_correlation.py'

rule global_optimization:
    input:
        ome_zarr=expand('results/tile-{tile}_SPIM.ome.zarr', tile=range(gridx*gridy)),
        pairs='results/overlapping_pairs.txt',
        offsets='results/pairwise_offsets.txt'
    output:
        optimized_translations='results/optimized_translations.txt'
    script: 
        'scripts/global_optimization.py'
 

rule assign_translations:
    input:
        ome_zarr=expand('results/tile-{tile}_SPIM.ome.zarr', tile=range(gridx*gridy)),
        optimized_translations='results/optimized_translations.txt'
    output:
        nifti=expand('results/tile-{tile}_optimized_SPIM.nii', tile=range(gridx*gridy))
    script: 
        "scripts/assign_translation.py"

rule fuse_volume:
    input:
        ome_zarr=expand('results/tile-{tile}_SPIM.ome.zarr', tile=range(gridx*gridy)),
        optimized_translations='results/optimized_translations.txt'
    output:
        ome_zarr = directory('results/fused_SPIM.ome.zarr'),
        nifti = 'results/fused_SPIM.nii'
    script: 
        'scripts/fuse_volume.py'

