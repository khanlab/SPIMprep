configfile: 'config.yml'

def get_tile_targets():
    gridx=config['gridx']
    gridy=config['gridy']
    tile_path=f'test_grid-{gridx}by{gridy}/tile-{{tile}}_SPIM.ome.zarr'

    return expand(tile_path, tile=range(gridx*gridy))

rule all:
    input: 
        ome_zarr=get_tile_targets()

rule create_test_dataset_single_ome_zarr:
    params:
        grid_shape=lambda wildcards: (int(wildcards.gridx),int(wildcards.gridy)),
        tile_index=lambda wildcards: int(wildcards.tile)
    output: 
        ome_zarr=directory('test_grid-{gridx}by{gridy}/tile-{tile}_SPIM.ome.zarr'),
        nifti='test_grid-{gridx}by{gridy}/tile-{tile}_SPIM.nii',
    script: 'scripts/create_test_dataset_singletile.py'


rule find_overlapping_pairs:
    input:
        ome_zarr=get_tile_targets()
    output:
        txt='test_grid-{gridx}by{gridy}/overlapping_pairs.txt'
    script: 'scripts/find_overlapping_pairs.py'
        
rule compute_pairwise_correlation:
    input:
        ome_zarr=get_tile_targets(),
        pairs='test_grid-{gridx}by{gridy}/overlapping_pairs.txt'
    output:
        offsets='test_grid-{gridx}by{gridy}/pairwise_offsets.txt'
    script: 'scripts/compute_pairwise_correlation.py'

rule global_optimization:
    input:
        ome_zarr=get_tile_targets(),
        pairs='test_grid-{gridx}by{gridy}/overlapping_pairs.txt',
        offsets='test_grid-{gridx}by{gridy}/pairwise_offsets.txt'
    output:
        optimized_translations='test_grid-{gridx}by{gridy}/optimized_translations.txt'
    script: 
        'scripts/global_optimization.py'
 

#-- unused below:

rule create_test_dataset_combined_ome_zarr:
    params:
        grid_shape=lambda wildcards: (int(wildcards.gridx),int(wildcards.gridy))
    output: 
        ome_zarr=directory('testcombined_grid-{gridx}by{gridy}_SPIM.ome.zarr'),
        translations_npy='testcombined_grid-{gridx}by{gridy}_translations.npy'
    script: 'scripts/create_test_dataset_combined.py'


rule get_tiles_as_nifti:
    input:
        ome_zarr='testcombined_grid-{gridx}by{gridy}_SPIM.ome.zarr'
    params:
        n_tiles = lambda wildcards: int(wildcards.gridx) * int(wildcards.gridy)
    output:
        tiles_dir=directory('testcombine_grid-{gridx}by{gridy}_SPIM.niftis')
    script:
        'scripts/get_tiles_as_nifti.py'


